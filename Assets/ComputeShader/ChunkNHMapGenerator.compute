#pragma kernel NHMapGen
#pragma kernel VertexRecompute

#include "../Libs/FractalNoise.cginc"



RWTexture2D<float4> NHMap;
//TODO remove this
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
uint vNum;
float bRad;

//NOTE un-normalized chunk bounds
float3 origin;
float3 mx;
float3 my;


float4x4 arg1;
float4x4 arg2;


// TODO Complete this.
float sampleHeight(float3 sPoint)
{
    return simpleNoise(sPoint, 2, 0.04);
}

// FOR FRAGMENT
[numthreads(8, 8, 1)]
void NHMapGen(uint2 id : SV_DispatchThreadID)
{
    //TODO surface detail computation, per biome?
    float2 step = (float2(id.x, id.y)) * 1.0 / 256.0;
    float3 samplePoint = normalize(origin + ((mx - origin) * step.x) + ((my - origin) * step.y));
    float height = 0.0;

    //DONT TOUCH THIS ! correct lerping to squish the vec to color clamps.
    NHMap[id.xy] = (half4(0, 0, 1, 1) + 1.0) * 0.5;
}



// PER VERTEX
[numthreads(8, 1, 1)]
void VertexRecompute(uint id : SV_DISPATCHTHREADID)
{
    const float offset = 0.002;

    if (id < vNum)
    {
        // Position actuelle du vertex
        float3 vPos = normalize(vertices[id]);

        // Hauteur actuelle
        // FIXME?
        float height = sampleHeight(vPos);

        // Position finale du vertex après déformation
        float3 vFinalPos = vPos * (1.0 + height) * bRad;
        vertices[id] = vFinalPos;

        
        // Calcul des positions déformées dans les trois directions
        float3 posXPlus = normalize(vPos + float3(offset, 0.0, 0.0));
        posXPlus = posXPlus * (1.0 + sampleHeight(posXPlus)) * bRad;

        float3 posXMinus = normalize(vPos - float3(offset, 0.0, 0.0));
        posXMinus = posXMinus * (1.0 + sampleHeight(posXMinus)) * bRad;

        float3 posYPlus = normalize(vPos + float3(0.0, offset, 0.0));
        posYPlus = posYPlus * (1.0 + sampleHeight(posYPlus)) * bRad;

        float3 posYMinus = normalize(vPos - float3(0.0, offset, 0.0));
        posYMinus = posYMinus * (1.0 + sampleHeight(posYMinus)) * bRad;

        float3 posZPlus = normalize(vPos + float3(0.0, 0.0, offset));
        posZPlus = posZPlus * (1.0 + sampleHeight(posZPlus)) * bRad;

        float3 posZMinus = normalize(vPos - float3(0.0, 0.0, offset));
        posZMinus = posZMinus * (1.0 + sampleHeight(posZMinus)) * bRad;

        // Calcul des gradients dans chaque direction
        float3 tangentX = posXPlus - posXMinus;
        float3 tangentY = posYPlus - posYMinus;
        float3 tangentZ = posZPlus - posZMinus;

        // X => YZ||ZY
        // Y => XZ||ZX
        // Z => XY||YX
        float3 normal;
        if (abs(vPos.x) >= abs(vPos.y) && abs(vPos.x) >= abs(vPos.z))
        {
            if (vPos.x >= 0.0) normal = cross(tangentY, tangentZ);
            else normal = cross(tangentZ, tangentY);
        }
        else if (abs(vPos.y) >= abs(vPos.x) && abs(vPos.y) >= abs(vPos.z))
        {
            if (vPos.y >= 0.0) normal = cross(tangentZ, tangentX);
            else normal = cross(tangentX, tangentZ);
        }
        else
        {
            if (vPos.z >= 0.0) normal = cross(tangentX, tangentY);
            else normal = cross(tangentY, tangentX);
        }
        

        // Normalisation finale
        normals[id] = normalize(normal);
    }
}